 
@Article{MacIver2019,
  author    = {MacIver, David and Hatfield-Dodds, Zac and Contributors, Many},
  journal   = {Journal of Open Source Software},
  title     = {Hypothesis: A new approach to property-based testing},
  year      = {2019},
  issn      = {2475-9066},
  month     = nov,
  number    = {43},
  pages     = {1891},
  volume    = {4},
  doi       = {10.21105/joss.01891},
  file      = {:MacIver2019 - Hypothesis_ a New Approach to Property Based Testing.pdf:PDF},
  publisher = {The Open Journal},
}

 
@InProceedings{Claessen2000,
  author     = {Claessen, Koen and Hughes, John},
  booktitle  = {Proceedings of the fifth ACM SIGPLAN international conference on Functional programming},
  title      = {QuickCheck: a lightweight tool for random testing of Haskell programs},
  year       = {2000},
  month      = sep,
  publisher  = {ACM},
  series     = {ICFP00},
  collection = {ICFP00},
  doi        = {10.1145/351240.351266},
  file       = {:Claessen2000 - QuickCheck_ a Lightweight Tool for Random Testing of Haskell Programs.pdf:PDF},
}

 
@Article{Lampropoulos2019,
  author    = {Lampropoulos, Leonidas and Hicks, Michael and Pierce, Benjamin C.},
  journal   = {Proceedings of the ACM on Programming Languages},
  title     = {Coverage guided, property based testing},
  year      = {2019},
  issn      = {2475-1421},
  month     = oct,
  number    = {OOPSLA},
  pages     = {1--29},
  volume    = {3},
  doi       = {10.1145/3360607},
  file      = {:Lampropoulos2019 - Coverage Guided, Property Based Testing.pdf:PDF},
  publisher = {Association for Computing Machinery (ACM)},
}

@Article{Nelson2021,
  author        = {Nelson, Tim and Rivera, Elijah and Soucie, Sam and Del Vecchio, Thomas and Wrenn, John and Krishnamurthi, Shriram},
  journal       = {The Art, Science, and Engineering of Programming, 2022, Vol. 6, Issue 2, Article 10},
  title         = {Automated, Targeted Testing of Property-Based Testing Predicates},
  year          = {2021},
  issn          = {2473-7321},
  month         = nov,
  number        = {2},
  volume        = {6},
  abstract      = {Context: This work is based on property-based testing (PBT). PBT is an increasingly important form of software testing. Furthermore, it serves as a concrete gateway into the abstract area of formal methods. Specifically, we focus on students learning PBT methods. Inquiry: How well do students do at PBT? Our goal is to assess the quality of the predicates they write as part of PBT. Prior work introduced the idea of decomposing the predicate's property into a conjunction of independent subproperties. Testing the predicate against each subproperty gives a "semantic" understanding of their performance. Approach: The notion of independence of subproperties both seems intuitive and was an important condition in prior work. First, we show that this condition is overly restrictive and might hide valuable information: it both undercounts errors and makes it hard to capture misconceptions. Second, we introduce two forms of automation, one based on PBT tools and the other on SAT-solving, to enable testing of student predicates. Third, we compare the output of these automated tools against manually-constructed tests. Fourth, we also measure the performance of those tools. Finally, we re-assess student performance reported in prior work. Knowledge: We show the difficulty caused by the independent subproperty requirement. We provide insight into how to use automation effectively to assess PBT predicates. In particular, we discuss the steps we had to take to beat human performance. We also provide insight into how to make the automation work efficiently. Finally, we present a much richer account than prior work of how students did. Grounding: Our methods are grounded in mathematical logic. We also make use of well-understood principles of test generation from more formal specifications. This combination ensures the soundness of our work. We use standard methods to measure performance. Importance: As both educators and programmers, we believe PBT is a valuable tool for students to learn, and its importance will only grow as more developers appreciate its value. Effective teaching requires a clear understanding of student knowledge and progress. Our methods enable a rich and automated analysis of student performance on PBT that yields insight into their understanding and can capture misconceptions. We therefore expect these results to be valuable to educators.},
  archiveprefix = {arXiv},
  copyright     = {arXiv.org perpetual, non-exclusive license},
  date          = {2021-11-19},
  doi           = {10.22152/programming-journal.org/2022/6/10},
  eprint        = {2111.10414},
  file          = {:Nelson2021 - Automated, Targeted Testing of Property Based Testing Predicates.pdf:PDF},
  keywords      = {Programming Languages (cs.PL), FOS: Computer and information sciences},
  primaryclass  = {cs.PL},
  publisher     = {Aspect-Oriented Software Association (AOSA)},
}

@Article{Corgozinho2023,
  author = {Corgozinho, Arthur Lisboa and Valente, Marco Tulio and Rocha, Henrique},
  title  = {How Developers Implement Property-Based Tests},
  year   = {2023},
  file   = {:Corgozinho2023 - How Developers Implement Property Based Tests.pdf:PDF},
}

@Comment{jabref-meta: databaseType:bibtex;}
